Group 11  - Aaron Karper (08-915-894), Joel Krebs (09-112-996)

# Serie 4 - Safety Patterns

## Ex 1
### Why are immutable classes inherently safe?
Because at no point after construction is the invariant violated - except if it
is violated all the time. This means that we can use such instances at any time
without need for synchronization, because even if we were interrupted during a
method call, the call would proceed as before, since the state can't have
changed.

### What is “balking”?
If the object is not in an "receiving state", it does not need to answer to
requests (it might throw exceptions instead). The client can resume control
instead of waiting for the service to become available again. He might decide to
use another provider of the service instead or try again later.

### When is partial synchronization better than full synchronization?
* If performance is an issue and some services can be safely fulfilled while
  other methods run.
  - If there is immutable state, we can safely provide service with that
  - There are well extractable "critical sections", which handle mutable state.
* If lifeness could be compromised otherwise.

### How does containment avoid the need for synchronization?
There is always only at most one thread accessing the resource - the one that
acquired it. As long as the thread keeps it, it can do to it, whatever it wants,
because no other thread could access it anyway.

### What liveness problems can full synchronization introduce?
There could be a deadlock, if both 1 and 2 need resources B and C to fulfill its
service. All access is synchronized, so if 1 acquires B and 2 acquires C before
1 can, then neither 1 nor 2 can proceed. It could be that 1 needed B only for
some safe section, so it could have run in parallel to 2's use of B.

### When is it all right to declare only some methods as synchronized?
* If some methods don't depend on mutable state.
* If we are somehow ensured that only one thread can access the methods.
* If the method itself only calles other methods which are synchronized and doesn't have a critical section on it's own.

## Ex 2

    property PS = (a -> (b -> PS|a -> PS)|b -> a -> PS).

`b, b, ERROR`

or any 3 consecutive `b`s

## Ex 3

I'am not sure about this one. The LIFT process error already goes to an error if more than 4 people try to enter the lift as the range only goes to 4. So the described trace is already covered.

A safety property states which traces are allowed, which are quite a lot combinations.

So it would be easier to write another process, which describes exactly this behaviour as error:

    LIFTCAPACITY = (enter -> enter -> enter -> enter -> ERROR).

And then let these processes work in paralell:

    ||SAFE = (LIFT||LIFTCAPACITY).



## Ex 4

The dinning savages: A tribe of savages eats communal dinners from a large pot
that can hold M servings of stewed missionary. When a savage wants to eat, he
helps himself from the pot unless it is empty in which case he waits for the pot
to be filled. If the pot is empty the cook refills the pot with M servings.  The
behavior of the savages and the cook are described by:

    SAVAGE = (getserving -> SAVAGE).
    COOK = (fillpot -> COOK).

Model the behavior of the pot as an FSP process.

    const M = 10
    FILLED = FILLED[M],
    FILLED[i:0..M] = (when (i==0) fillpot -> FILLED[M]
					 |when (i>0)  getserving -> FILLED[i-1]
					 ).