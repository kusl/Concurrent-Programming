Group 11  - Aaron Karper (08-915-894), Joel Krebs (09-112-996)

# Serie3 - Safety and Synchronization

## Exercise 1

**1. Provide a deﬁnition of *multiprogramming*, *multiprocessing* and *distributed processing*.**

A multiprogramming system is a system which share it's resources for several
applications.

Multiprocessing happens, when you use more than one CPU within the same system,
so that there are processes running truely in parallel.

And in distributed system tasks are distributed not only to different
processors, but to seperate systems.

**2. In a multiprogramming system implemented on top of a multiprocessor architecture, do we need to implement a synchronization system if we know that all the threads use their own variables and they don’t have to communicate with other threads**

Since it is a multiprogramming system, there are some resources, that need to be
managed. These resources typically require some sort of synchronization -- even
hard disk access needs that.

**3. What are safety properties? How are they modeled in FSP?**

These are certain conditions or state transitions which are not allowed,
basicially the defintion of "something bad happend". They're modelded in FSP
with simple processes (that refer to shared states) which either define what is
allowed - and everything else is an error - or what is not allowed.

**4. Is the busy-wait mutex protocol fair? Deadlock-free? Justify your answer.**

It certainly is deadlock free as we can proof that with the FSP, but there are
no guarantees that the requests are handled in any particular order (no fairness
guarantees). It could very well be the case, that the first process keeps
blocking the second by keeping its `waiting` flag true.

**5. If we have to implement a simple batchoperating system on a singleprocessor architecture would have sense to use path expressions to handle the concurrency? (Motivate your answer!!!)**

Assuming that "simple batchoperating system" means, that the worst
synchronization problem, we have to face is a producer/consumer situation, then
it is certainly sufficient. We can easily lock shared resources with 
`lock[R] -> unlock[R]` and handle producer/consumer with `write -> read`.

**6. What happens if you call wait or notify outside a synchronized method or block?**

This will raise an IllegalMonitorStateException. (assuming we're talking about
Java here)

**7. How would you manually check a safety property?**

Try to come up with every possible state of the system and ensure, that the
invariant holds. But this get's out of hands fast, so we could implement some
tests which run the code under different conditions high number of times in
sequence and alert as soon as the invariant is broken.

**8. Can you ensure safety in concurrent programs without using locks?**

If you can avoid shared mutable state. This is the principle of functional
languages and is on the raise lately due to exactly these kinds of questions.
Functional programing builds on the paradigm that you don't have any mutable
state and therefore you can not break any invariant.

Another possibility to avoid shared state is message passing, which is possible
to do with lock-less queues.

**9. What is the *ﬁnite progress assumption*?**

Every process will progress in finite time -- i.e. no process will starve.

## Exercise 2

We show that by describing possible traces of S1 and S2.

**S1**

S1 can either do *a* (due to the P process) or *c*. If it does *a*, the only
thing it can do is *c* as *b* is a resource shared with Q. If it has done *c*
first it can only do *a* due to the same reason. Afterwards *b* is the only
possibility afterwards. And then we're at the start again.

So possible traces are:

    {(a,c,b|c,a,b)*}

**S2**

It is quite obvious that we come to the same traces here. Either we do
`a->c->b->S2` or `c->a->b->S2` all over again. So we have the same trace:

    {(a,c,b|c,a,b)*}

## Exercise 3

    TABLE = (pickup->trigger->putdown->TABLE).
    GUN = (trigger->bang->STOP|bang->STOP).

    PLAYER = (pickup-> (bang -> STOP | trigger -> putdown -> PLAYER)).

    ||Roulette = (michael:PLAYER || charlton:PLAYER || {michael,charlton}::TABLE || {michael,charlton}::GUN).





